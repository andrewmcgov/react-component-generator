export function storiesTemplate(
  componentName: string,
  verboseComments: boolean,
  singleQoute: boolean = true
) {
  let text =
    `import React from 'react';\n` +
    `import {Meta, Story} from '@storybook/react/types-6-0';\n\n` +
    `import {${componentName}, ${componentName}Props} from './${componentName}';\n\n`;

  if (verboseComments) {
    text =
      text +
      `// Learn how to write stories:\n` +
      `// https://master--6054e7fc826ed700218e4b3b.chromatic.com/?path=/story/documentation-how-to-write-stories--page\n`;
    +`// To disable comments generated by the extension, search for 'verbose stories' in VS Code settings\n`;
  }

  text =
    text +
    `export default {\n` +
    `  title: 'components/${componentName}',\n` +
    `  component: ${componentName},\n` +
    `  parameters: {\n`;

  if (verboseComments) {
    text =
      text +
      `    // Embedding Figma designs\n` +
      `    // The embed appears in the "Design" tab of the story\n` +
      `    // Learn more: https://pocka.github.io/storybook-addon-designs/?path=/docs/docs-figma-readme--page\n`;
  }

  text =
    text +
    `    design: {\n` +
    `      type: 'figma',\n` +
    `      url: 'https://www.figma.com/file/...?node-id=...',\n` +
    `    },\n` +
    `  },\n` +
    `} as Meta;\n\n`;

  if (verboseComments) {
    text = text + `// ðŸ‘‡ We create a "template" of how args map to rendering\n`;
  }

  text =
    text +
    `const Template: Story<${componentName}Props> = (args) => <${componentName} {...args} />;\n\n`;

  if (verboseComments) {
    text = text + `// ðŸ‘‡ Each story then reuses that template\n`;
  }

  text = text + `export const Basic = Template.bind({});\n\n`;

  if (verboseComments) {
    text =
      text +
      `// Story args\n` +
      `// Learn more: https://storybook.js.org/docs/react/writing-stories/args\n`;
  }

  text = text + `Basic.args = {};\n`;

  return singleQoute ? text : text.split(`'`).join(`"`);
}
